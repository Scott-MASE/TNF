spring.application.name=AnomalyDetection
server.port=9097

# Datasource settings for anomaly service's database
spring.datasource.url=jdbc:mysql://host.docker.internal:3306/anomalydb
spring.datasource.username=root
spring.datasource.password=root

# JPA settings
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true


# Kafka Configuration
spring.kafka.bootstrap-servers=kafka:9092
spring.kafka.consumer.group-id=anomaly-group  # different consumer group than traffic service
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.properties.spring.deserializer.key.delegate.class=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.use.type.headers=false
spring.kafka.consumer.properties.spring.json.trusted.packages=*



# VERY IMPORTANT: Configure the default target type
spring.kafka.consumer.properties.spring.json.value.default.type=com.tus.common.dto.TrafficDataDTO


# No producer config needed here (unless anomaly service also produces Kafka messages)

# Kafka topic to listen on
kafka.topic.traffic=traffic-data

# Logging levels
logging.level.org.apache.kafka=INFO
logging.level.org.springframework.kafka=INFO

# Thresholds for anomaly detection
traffic.threshold.day=1000
traffic.threshold.night=500

# Time range for day/night threshold
traffic.day.start=06
traffic.day.end=18


